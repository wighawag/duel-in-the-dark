/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GameInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAndMove"
      | "enemy_shot"
      | "move"
      | "players"
      | "start"
      | "turn"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptAndMove",
    values: [BigNumberish, BytesLike, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enemy_shot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [BytesLike, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "start", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "turn", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "acceptAndMove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enemy_shot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "turn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface Game extends BaseContract {
  connect(runner?: ContractRunner | null): Game;
  waitForDeployment(): Promise<this>;

  interface: GameInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAndMove: TypedContractMethod<
    [
      prevHash: BigNumberish,
      proof: BytesLike,
      hit: boolean,
      new_hash: BigNumberish,
      shot: BigNumberish
    ],
    [void],
    "payable"
  >;

  enemy_shot: TypedContractMethod<[], [bigint], "view">;

  move: TypedContractMethod<
    [
      proof: BytesLike,
      hit: boolean,
      new_hash: BigNumberish,
      shot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  players: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        previous_hash: bigint;
        addr: string;
        numHit: bigint;
      }
    ],
    "view"
  >;

  start: TypedContractMethod<[locationHash: BigNumberish], [void], "payable">;

  turn: TypedContractMethod<[], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAndMove"
  ): TypedContractMethod<
    [
      prevHash: BigNumberish,
      proof: BytesLike,
      hit: boolean,
      new_hash: BigNumberish,
      shot: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "enemy_shot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "move"
  ): TypedContractMethod<
    [
      proof: BytesLike,
      hit: boolean,
      new_hash: BigNumberish,
      shot: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "players"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        previous_hash: bigint;
        addr: string;
        numHit: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "start"
  ): TypedContractMethod<[locationHash: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "turn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
