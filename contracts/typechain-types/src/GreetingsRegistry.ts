/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GreetingsRegistry {
  export type MessageStruct = {
    content: string;
    timestamp: BigNumberish;
    dayTimeInSeconds: BigNumberish;
  };

  export type MessageStructOutput = [
    content: string,
    timestamp: bigint,
    dayTimeInSeconds: bigint
  ] & { content: string; timestamp: bigint; dayTimeInSeconds: bigint };
}

export interface GreetingsRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "lastGreetingOf"
      | "messages"
      | "postUpgrade"
      | "prefix"
      | "setMessage"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MessageChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "lastGreetingOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "postUpgrade", values: [string]): string;
  encodeFunctionData(functionFragment: "prefix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMessage",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "lastGreetingOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prefix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMessage", data: BytesLike): Result;
}

export namespace MessageChangedEvent {
  export type InputTuple = [
    user: AddressLike,
    timestamp: BigNumberish,
    message: string,
    dayTimeInSeconds: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    timestamp: bigint,
    message: string,
    dayTimeInSeconds: bigint
  ];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
    message: string;
    dayTimeInSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GreetingsRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): GreetingsRegistry;
  waitForDeployment(): Promise<this>;

  interface: GreetingsRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  lastGreetingOf: TypedContractMethod<[user: AddressLike], [string], "view">;

  messages: TypedContractMethod<
    [user: AddressLike],
    [GreetingsRegistry.MessageStructOutput],
    "view"
  >;

  postUpgrade: TypedContractMethod<
    [initialPrefix: string],
    [void],
    "nonpayable"
  >;

  prefix: TypedContractMethod<[], [string], "view">;

  setMessage: TypedContractMethod<
    [message: string, dayTimeInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "lastGreetingOf"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "messages"
  ): TypedContractMethod<
    [user: AddressLike],
    [GreetingsRegistry.MessageStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "postUpgrade"
  ): TypedContractMethod<[initialPrefix: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "prefix"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setMessage"
  ): TypedContractMethod<
    [message: string, dayTimeInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MessageChanged"
  ): TypedContractEvent<
    MessageChangedEvent.InputTuple,
    MessageChangedEvent.OutputTuple,
    MessageChangedEvent.OutputObject
  >;

  filters: {
    "MessageChanged(address,uint256,string,uint24)": TypedContractEvent<
      MessageChangedEvent.InputTuple,
      MessageChangedEvent.OutputTuple,
      MessageChangedEvent.OutputObject
    >;
    MessageChanged: TypedContractEvent<
      MessageChangedEvent.InputTuple,
      MessageChangedEvent.OutputTuple,
      MessageChangedEvent.OutputObject
    >;
  };
}
